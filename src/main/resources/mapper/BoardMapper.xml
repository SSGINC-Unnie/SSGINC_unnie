<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssginc.unnie.community.mapper.BoardMapper">

    <!-- 게시글 작성  -->
    <insert id="insertBoard" useGeneratedKeys="true" keyColumn="board_id" keyProperty="boardId">
        insert into board
        (
         board_title,
         board_category,
         board_contents,
         board_thumbnail,
         board_author
         )
        values
        (
         #{boardTitle},
         #{boardCategory},
         #{boardContents},
         #{boardThumbnail},
         #{boardAuthor}
        )
    </insert>

    <!--  게시글 상세 조회  -->
    <select id="selectBoard" resultType="com.ssginc.unnie.community.dto.board.BoardDetailGetResponse">
        SELECT
            b.board_id,
            b.board_category,
            b.board_author,
            m.member_nickname AS "authorNickname",  m.member_profile AS "authorProfile",    b.board_title,
            b.board_contents,
            b.board_created_at,
            b.board_views,
            coalesce(COUNT(l.like_id), 0) AS "likeCount",
            CASE
                WHEN b.board_author = #{memberId} THEN TRUE
                ELSE FALSE
                END AS "isOwner"
        FROM board b
                 JOIN member m ON b.board_author = m.member_id
                 LEFT JOIN `like` l
                           ON l.like_target_type = "BOARD"
                               AND l.like_target_id = b.board_id
        WHERE b.board_id = #{boardId}
          AND b.board_isactive = 1
        GROUP BY b.board_id, m.member_nickname, m.member_profile
    </select>

    <!--  게시글 수정  -->
    <update id="updateBoard" useGeneratedKeys="true" keyProperty="boardId" keyColumn="board_id">
        update board
        set
            board_title = #{boardTitle},
            board_category = #{boardCategory},
            board_contents = #{boardContents},
            board_thumbnail = #{boardThumbnail},
            board_author = #{boardAuthor},
            board_updated_at = current_timestamp
        where
            board_id = #{boardId}
    </update>

    <update id="softDeleteBoard" useGeneratedKeys="true" keyColumn="board_id" keyProperty="boardId">
        update board
        set
            board_isactive = 0,
            board_updated_at = current_timestamp
        where
            board_id = #{boardId}
    </update>

    <!-- boardId 존재 여부  -->
    <select id="checkBoardId" resultType="int">
        SELECT COUNT(*) FROM board WHERE board_id = #{boardId} AND board_isactive = 1
    </select>

    <!-- boardAuthorId 와 현재 로그인 유저 번호 일치 여부  -->
    <select id="checkBoardAndAuthor" resultType="java.lang.Integer">
        SELECT
            CASE
                WHEN COUNT(board_id) = 0 THEN -1  -- 게시글이 존재하지 않음
                WHEN board_author != #{memberId} THEN 0  -- 작성자가 다름
                ELSE 1  -- 정상적으로 수정 가능
                END AS "ownership"
        FROM board
        WHERE board_id = #{boardId}
          AND board_isactive = 1
    </select>


    <select id="getGuestBoards" resultType="com.ssginc.unnie.community.dto.board.BoardsGuestGetResponse">
        SELECT
        b.board_author AS boardAuthor,
        m.member_nickname AS memberNickname,
        m.member_profile AS memberProfile,
        b.board_id AS boardId,
        b.board_title AS boardTitle,
        b.board_thumbnail AS boardThumbnail,
        DATE_FORMAT(b.board_created_at, '%Y-%m-%d %H:%i:%s') AS boardCreatedAt,
        b.board_views AS boardViews,
        (SELECT COUNT(like_id) FROM `like` l WHERE l.like_target_type = "BOARD" AND l.like_target_id = b.board_id) AS likeCount,
        (SELECT COUNT(comment_id) FROM `comment` c WHERE c.comment_board_id = b.board_id) AS commentCount
        FROM board b
        JOIN member m ON b.board_author = m.member_id
        <where>
            b.board_isactive = 1
            AND b.board_category = #{category}
            <if test="search != null and search != ''">
                <choose>
                    <when test="searchType == 'TITLE'">
                        AND b.board_title LIKE CONCAT('%', #{search}, '%')
                    </when>
                    <when test="searchType == 'CONTENT'">
                        AND b.board_contents LIKE CONCAT('%', #{search}, '%')
                    </when>
                </choose>
            </if>
        </where>
        ORDER BY
        <choose>
            <when test="sort == 'POPULAR'">
                b.board_views DESC
            </when>
            <otherwise>
                b.board_created_at DESC
            </otherwise>
        </choose>
    </select>

    <!-- 회원 게시글 목록 조회(좋아요 여부 포함)   -->
    <select id="getBoards" resultType="com.ssginc.unnie.community.dto.board.BoardsGetResponse">
        SELECT
            b.board_author AS boardAuthor,
            m.member_nickname AS memberNickname,
            m.member_profile AS memberProfile,
            b.board_thumbnail AS boardThumbnail,
            b.board_id AS boardId,
            b.board_title AS boardTitle,
            DATE_FORMAT(b.board_created_at, '%Y-%m-%d %H:%i:%s') AS boardCreatedAt,
            b.board_views AS boardViews,
            -- 좋아요 개수
            (SELECT COUNT(like_id) FROM `like` l WHERE l.like_target_type = "BOARD" AND l.like_target_id = b.board_id) AS likeCount,
            -- 댓글 개수
            (SELECT COUNT(comment_id) FROM `comment` c WHERE c.comment_board_id = b.board_id) AS commentCount,
            EXISTS(
                SELECT 1
                FROM `like` l
                WHERE l.like_target_type = "BOARD"
                  AND l.like_target_id = b.board_id
                  AND l.like_member_id = #{memberId}
            ) AS liked
        FROM board b
                 JOIN member m ON b.board_author = m.member_id
        WHERE
            (b.board_category = #{category})
                AND (#{searchType} = 'TITLE' AND b.board_title LIKE CONCAT('%', #{search}, '%')) OR
            (#{searchType} = 'CONTENT' AND b.board_contents LIKE CONCAT('%', #{search}, '%'))
            AND b.board_isactive = 1
        ORDER BY
            CASE WHEN #{sort} = 'LATEST' THEN b.board_created_at END DESC,
            CASE WHEN #{sort} = 'POPULAR' THEN b.board_views END DESC
    </select>

    <!-- 나의 게시글 목록 조회  -->
    <select id="getMyBoards" resultType="com.ssginc.unnie.mypage.dto.community.MyPageBoardsResponse">
        SELECT
            b.board_id AS boardId,
            b.board_title AS boardTitle,
            b.board_thumbnail AS boardThumbnail,
            DATE_FORMAT(b.board_created_at, '%Y-%m-%d %H:%i:%s') AS boardCreatedAt,
            b.board_views AS boardViews,
            -- 좋아요 개수
            (SELECT COUNT(like_id) FROM `like` l WHERE l.like_target_type = "BOARD" AND l.like_target_id = b.board_id) AS likeCount,
            -- 댓글 개수
            (SELECT COUNT(comment_id) FROM `comment` c WHERE c.comment_board_id = b.board_id) AS commentCount
        FROM board b
        WHERE b.board_author = #{memberId}
          AND b.board_isactive = 1
        ORDER BY b.board_created_at desc
    </select>

</mapper>
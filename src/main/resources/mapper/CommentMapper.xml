<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssginc.unnie.community.mapper.CommentMapper">

    <!-- 댓글 작성 -->
    <insert id="createComment" useGeneratedKeys="true" keyProperty="commentId" keyColumn="comment_id">
        INSERT INTO comment
        (
            comment_contents,
            comment_board_id,
            comment_member_id,
            comment_parent_id
        )
        VALUES
            (
                #{commentContents},
                #{commentBoardId},
                #{commentMemberId},
                0
            )
    </insert>

    <!-- 대댓글 작성 -->
    <insert id="createReplyComment" useGeneratedKeys="true" keyProperty="commentId" keyColumn="comment_id">
        INSERT INTO comment
        (
            comment_contents,
            comment_board_id,
            comment_parent_id,
            comment_member_id
        )
        VALUES
            (
                #{commentContents},
                #{commentBoardId},
                #{commentParentId},
                #{commentMemberId}
            )
    </insert>

    <!-- 게시글 식별 번호 존재 여부 확인 -->
    <select id="checkBoardId" resultType="java.lang.Integer">
    SELECT EXISTS(
        SELECT 1
        FROM board
        where board_id = #{commentBoardId}
          AND board_isactive = 1
    ) as "checkBoardId"
    </select>

    <!-- 댓글 존재 여부 확인 -->
    <select id="checkCommentId" resultType="java.lang.Integer">
    SELECT EXISTS(
        SELECT 1
        FROM comment
        WHERE comment_board_id = #{commentBoardId}
          AND comment_id = #{commentParentId}
          AND comment_isactive = 1
    ) as "checkCommentId"
    </select>

    <!--  비로그인 시 댓글 조회   -->
    <select id="getAllCommentsGuest" resultType="com.ssginc.unnie.community.dto.comment.CommentGuestGetResponse">
        SELECT
            c.comment_id,
            c.comment_member_id,
            c.comment_parent_id,
            m.member_nickname,
            m.member_profile,
            c.comment_created_at,
            c.comment_updated_at,
            c.comment_contents,
            (SELECT COUNT(like_id) FROM `like` l WHERE l.like_target_type = "COMMENT" AND l.like_target_id = c.comment_id) AS likeCount
        FROM
            comment c
            JOIN member m ON c.comment_member_id = m.member_id
        WHERE
            c.comment_board_id = #{boardId}
          AND c.comment_isactive = 1

        ORDER BY
            c.comment_id ASC
    </select>

    <!-- 로그인 시 댓글 조회 -->
    <select id="getAllComments" resultType="com.ssginc.unnie.community.dto.comment.CommentGetResponse">
        SELECT
            c.comment_id,
            c.comment_member_id,
            c.comment_parent_id,
            m.member_nickname,
            m.member_profile,
            c.comment_created_at,
            c.comment_updated_at,
            c.comment_contents,
            (SELECT COUNT(like_id) FROM `like` l WHERE l.like_target_type = "COMMENT" AND l.like_target_id = c.comment_id) AS likeCount,
            EXISTS(
                SELECT 1 FROM `like` l
                WHERE l.like_target_type = "COMMENT"
                  AND l.like_target_id = c.comment_id
                  AND l.like_member_id = #{memberId}
            ) AS liked,
            COALESCE((SELECT l.like_id FROM `like` l WHERE l.like_target_type = 'COMMENT' AND l.like_target_id = c.comment_id AND l.like_member_id = #{memberId}), 0) AS "likeId",

            CASE
                WHEN c.comment_member_id = #{memberId} THEN TRUE
                ELSE FALSE
                END AS "isOwner"

        FROM comment c JOIN member m ON c.comment_member_id = m.member_id
        WHERE c.comment_board_id = #{boardId}
          AND c.comment_isactive = 1
        ORDER BY c.comment_id ASC
    </select>
    <!-- 댓글 수정 -->
    <update id="updateComment" useGeneratedKeys="true" keyColumn="comment_id" keyProperty="commentId">
        UPDATE comment
        SET
            comment_isactive = 0,
            comment_updated_at = current_timestamp
        WHERE
            comment_id = #{commentId} OR comment_parent_id = #{commentId}
    </update>

    <!-- commentMemberId 와 현재 로그인 유저 번호 일치 여부  -->
    <select id="checkCommentAndAuthor" resultType="java.lang.Integer">
        SELECT
            CASE
                -- 1. 먼저 comment_id로 댓글을 찾고, 없으면 -1 반환
                WHEN c.comment_id IS NULL THEN -1
                -- 2. 댓글이 있는데 작성자가 다르면 0 반환
                WHEN c.comment_member_id != #{memberId} THEN 0
                -- 3. 댓글도 있고 작성자도 같으면 1 반환
                ELSE 1
                END AS "ownership"
        FROM (SELECT comment_id, comment_member_id FROM comment WHERE comment_id = #{commentId} AND comment_isactive = 1) c
    </select>

    <!-- 내가 쓴 댓글 목록 조회   -->
    <select id="getMyComments" resultType="com.ssginc.unnie.mypage.dto.community.MyPageCommentsResponse">
        SELECT
            c.comment_id AS commentId,
            c.comment_created_at AS commentCreatedAt,
            c.comment_contents AS commentContents,
            (SELECT COUNT(like_id) FROM `like` l WHERE l.like_target_type = "COMMENT" AND l.like_target_id = c.comment_id) AS likeCount,
            b.board_id AS boardId,
            b.board_title AS boardTitle,
            b.board_thumbnail AS boardThumbnail,
            (SELECT COUNT(comment_id) FROM comment com WHERE com.comment_board_id = b.board_id AND com.comment_isactive = 1) AS boardCommentCount
        FROM
            comment c
                JOIN
            board b ON c.comment_board_id = b.board_id
        WHERE
            c.comment_member_id = #{memberId}
          AND c.comment_isactive = 1
          AND b.board_isactive = 1
        ORDER BY
            c.comment_created_at DESC
    </select>

    <!-- 댓글 식별 번호로 게시글 작성자 정보 가져오기  -->
    <select id="getBoardAuthorIdByCommentId" resultType="com.ssginc.unnie.notification.dto.NotificationResponse">
        SELECT
            b.board_author AS receiverId,
            m.member_nickname AS receiverNickname,
            b.board_title AS targetTitle
        FROM
            comment c
            JOIN board b ON (c.comment_board_id = b.board_id)
            JOIN member m ON (b.board_author = m.member_id)
        WHERE c.comment_id = #{commentId}
    </select>

    <select id="getBoardTitleAndBoardAuthorIdByBoardId"
            resultType="com.ssginc.unnie.community.dto.board.BoardResponseForEvent">
        SELECT
            b.board_author,
            b.board_title
        FROM
            board b
        WHERE
            b.board_id = #{commentBoardId}
          AND board_isactive = 1
    </select>

    <select id="getMemberIdByCommentId" resultType="java.lang.Integer">
        SELECT
            comment_member_id
        FROM
            comment
        WHERE
            comment_id = #{commentParentId}
        AND comment_isactive = 1
    </select>

    <!-- 댓글 삭제(soft delete)  -->
    <update id="deleteComment" useGeneratedKeys="true" keyProperty="commentId" keyColumn="comment_id">
        UPDATE comment
        SET
            comment_isactive = 0,
            comment_updated_at = current_timestamp
        WHERE
            comment_id = #{commentId}
    </update>

    <select id="countRootCommentsByBoardId" resultType="int">
        SELECT COUNT(*)
        FROM comment
        WHERE comment_board_id = #{boardId}
          AND comment_parent_id = 0
          AND comment_isactive = 1
    </select>

</mapper>

